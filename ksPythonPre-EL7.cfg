# Python %pre script kickstart example
# author: F. Cami <fcami@redhat.com>
# License: MIT

# Tested with RHEL 7.2 and CentOS 7.2 on KVM and VMware.
# NB: on WMware, boot the installation ISO with "net.ifnames=0 biosdevname=0" for best results.

auth --enableshadow --passalgo=sha512
url --url="http://install.server.example.com/os"

text

firstboot --disable
ignoredisk --only-use=vda

keyboard --vckeymap=us --xlayouts='us'
lang en_US.UTF-8

reboot

# dynamic network configuration
%include /tmp/network
%include /tmp/hostname

# changeMe
rootpw --iscrypted $6$E6FAaU9IqvGW8iN6$LmW4b3hkoUn0VSbmga2FyvQGJKG79YovrnhLLlUtrQPEsODxm.vg4owYexQw3N9y8synGI/cQ3hOV0hepj9YD1
timezone Europe/Paris --isUtc

# dynamic bootloader configuration
%include /tmp/bootloader

# (mostly) static partitioning...
clearpart --all --initlabel
ignoredisk --only-use=/dev/vda
part /boot --fstype="xfs" --ondisk=vda --size=500
part pv.144 --fstype="lvmpv" --ondisk=vda --grow
volgroup vgsys --pesize=4096 pv.144
logvol /  --fstype="xfs" --size=2048 --name=root --vgname=vgsys
# except for swap size
%include /tmp/swapsize

%packages
@^minimal
@core
vim-enhanced
rsync
wget
screen
%end

%pre 
exec {STDOUTBACK}>&1
exec {STDERRBACK}>&2
exec 1>>/dev/pts/0
exec 2>>/dev/pts/0

cat << EOF > /tmp/pre-ks0
# author: F. Cami <fcami@redhat.com>

# Goals
# * detect system type and characteristics
# * ask questions (IP, netmask, etc)
# * generate kickstart snippets

# Not implemented yet
# * IP syntax validation
# * DNS

# Requirements:
# * Python 2.7
# * RHEL7 Anaconda %pre environment

import math
import subprocess
import os, sys
import snack
import time

""" the mySystem class detects and contains useful data about your system
        public methods are howMuchSwap, isVM, isVMware, getNetworkInterfaces """
class mySystem(object):

        """ counts total RAM, in GB, rounded """
        def __getRAM(self):
                f = open('/proc/meminfo', 'r')
                data = f.readlines()
                f.close()
                for i in data:
                        if i.find("MemTotal") != -1:
                                memTotal = int(i.split(":")[1].strip().split(" ")[0])
                return int(math.ceil(memTotal /1024.0/1024)) 

        """ lists available network interfaces """
        def __getEthInterfaces(self):
                return [eth for eth in subprocess.check_output(["ls", "/sys/class/net"], stderr=subprocess.STDOUT).split() if eth != "lo"]

        """ detects if the machine is a VM running under VMware """
        def __isVMware(self):
                if subprocess.call("dmidecode | grep VMware", shell=True) == 0:
                        return True
                else:
                        return False

        """ detects if the machine is a VM running under QEMU/KVM """
        def __isQEMU(self):
                if subprocess.call("dmidecode | grep QEMU", shell=True) == 0:
                        return True
                else:
                        return False

        """     # VMs:
		# up to 4GB => 4GB
                # up to 8GB => same as RAM
                # over 8GB => 8GB
		# Physical systems scale up to 16GB of swap.
        """
        def howMuchSwap(self):
                if self.isVM():
                        if self._RAM <= 4:
                                return 4096
                        elif self._RAM <= 8:
                                return self._RAM * 1024
                        else:
                                return 8192
                else:
                        if self._RAM <= 4:
                                return 4096
                        elif self._RAM <= 16:
                                return self._RAM * 1024
                        else:
                                return 16384
                                
        """ currently returns True if running on VMware or QEMU only -
	    can be extended to other virtualization types if needed
        """
        def isVM(self):
                if self._isVMware or self._isQEMU:
                        return True
                else:
                        return False

        """ outputs if the machine is a VM running under VMware """
        def isVMware(self):
                if self._isVMware:
                        return True
                else:
                        return False

        """ outputs the list of available network interfaces """
        def getNetworkInterfaces(self):
                return self._ethInterfaces

	""" changes ttys - WIP / unused """
	def set_tty(self, n):         
		f = open('/dev/tty%d' % n, 'a')
		os.dup2(f.fileno(), sys.stdin.fileno())
		os.dup2(f.fileno(), sys.stdout.fileno())
		os.dup2(f.fileno(), sys.stderr.fileno())


        """ constructor """
        def __init__(self):
                self._RAM = self.__getRAM()
                self._isQEMU = self.__isQEMU()
                self._isVMware = self.__isVMware()
                self._isVM = self.isVM()
                self._ethInterfaces = self.__getEthInterfaces()


""" the promptScreen class takes a two strings (title+subtitles)
         and a list of strings (prompts), prompts the user, and returns
         a dictionary
"""
class promptScreen(object):

        """ contructor """
        def __init__(self, title=None, subtitle=None, prompts=None):
		self.updateWindow(title=None, subtitle=None, prompts=None)

	def updateWindow(self, title=None, subtitle=None, prompts=None):
                self._title = title
                self._subtitle = subtitle
                self._prompts = prompts
                self._result = None

        """ actual run: display the screen """
        def displayWindow(self):
                try:
                	screen = snack.SnackScreen()
	                result = snack.EntryWindow(screen, self._title, self._subtitle, self._prompts, allowCancel = 1, entryWidth = 60, buttons = ['Ok', 'Cancel'], help = None)
	                screen.finish()
                except:
                        print "Error running snack."
                        sys.exit(1)
                status = result[0]
                if status == 'ok':
                        creds = {}
                        index = 0
                        for pr in self._prompts:
                                creds[pr] = result[1][index]
                                index += 1
                        self._result = creds

        """ accessor, returns the result """
        def getResult(self):
                return self._result


""" the kickstartSnippetGenerator class generates all types of
        kickstart snippets needed by the system """
class kickstartSnippetGenerator(mySystem, promptScreen):

        """ constructor """
        def __init__(self):
                mySystem.__init__(self)
		promptScreen.__init__(self) 
                self._snippetDic = {"VMwareTools": "/tmp/vmwaretools",
                                                        "swapSize": "/tmp/swapsize",
                                                        "bootLoader": "/tmp/bootloader",
                                                        "hostname": "/tmp/hostname",
                                                        "network": "/tmp/network"}

        """ takes a list and writes each element of the list as a line in a file """
        def __writeFile(self, myFile, myList):
                f = open(myFile, 'w')
                f.write(os.linesep.join(myList))
                f.close()

        def __writeSnippet(self, snippetName, mySnippet):
                snippetFile = self._snippetDic[snippetName]
                self.__writeFile(snippetFile, mySnippet)
                time.sleep(2)

        def genHostname(self):
                self.updateWindow("Network Hostname Selection", "", ["hostname",])
                self.displayWindow()
                self.__writeSnippet("hostname", ["network  --hostname=%s"%(self.getResult()["hostname"],)])

	""" adapt to your needs """
        def genNetworkConfig(self):
                if self.isVM():
                        networkInterfaces = self.getNetworkInterfaces()
                        networkConfig = {}
                        networkSnippet = []
                        if len(networkInterfaces) > 1:
                                adminEth = {"ADMIN Interface:": "0"}
                                while adminEth["ADMIN Interface:"] not in networkInterfaces:
                                        self.updateWindow("What is your ADMIN network interface?", "%s"%(" ".join(networkInterfaces),), ["ADMIN Interface:"])
                                        self.displayWindow()
                                        adminEth = self.getResult()
                                networkConfig['adminEth'] = adminEth["ADMIN Interface:"]
                        else:
                                # if there is a single interface, it is called eth0 and is an admin interface
                                networkConfig['adminEth'] = "eth0"
                        print "adminEth: "+networkConfig['adminEth']
                        time.sleep(2)
                        for eth in networkInterfaces:
                        # note that "lo" should never appear in that list, nevertheless we ignore it
                                if eth != "lo":
                                        self.updateWindow("Network Configuration: %s"%(eth,), "", ["IP","Netmask", "Gateway"])
                                        self.displayWindow()
                                        networkConfig[eth] = self.getResult()
                        # yes, this is the same loop again, the intention is to put a check between the two loops
                        for eth in networkInterfaces:
                                if eth != "lo":
                                        if networkConfig[eth]["Gateway"] != "":
                                                networkSnippet.append("network  --bootproto=static --device=%s --ip=%s  --netmask=%s --gateway=%s --noipv6 --activate"%(eth,networkConfig[eth]["IP"],networkConfig[eth]["Netmask"],networkConfig[eth]["Gateway"]))
                                        else:
                                                networkSnippet.append("network  --bootproto=static --device=%s --ip=%s  --netmask=%s --noipv6 --activate"%(eth,networkConfig[eth]["IP"],networkConfig[eth]["Netmask"]))
                        self.__writeSnippet("network", networkSnippet)
                else:   # physical systems' network configuration is not handled at all.
                        self.__writeSnippet("network", "")

        def genBootloader(self):
                if self.isVM():
                        self.__writeSnippet("bootLoader", ["bootloader --location=mbr --append=\"rhgb quiet crashkernel=auto net.ifnames=0 biosdevname=0\""])
                else:
                        self.__writeSnippet("bootLoader", ["bootloader --location=mbr --append=\"rhgb quiet crashkernel=auto\""])

        def genSwap(self):
                self.__writeSnippet("swapSize", ["logvol swap --vgname=vgsys --name=lv_swap --fstype=swap --size=%s"%(self.howMuchSwap(),)])

        def genVMwareTools(self):
                if self.isVMware():
                        self.__writeSnippet("VMwareTools", "yum -y install open-vm-tools")
                else:
                        self.__writeSnippet("VMwareTools", "exit 0")



""" main() checks if run as root, then generates appropriate kickstart
    snippets for the running system, to be included in a kickstart
    file this way:
    %include /tmp/bootloader
"""
def main():
        if os.geteuid() != 0:
                print("You need to have root privileges to run this script.\n")
                sys.exit(1)
        else:
                ks = kickstartSnippetGenerator()
                ks.genBootloader()
                ks.genSwap()
                ks.genVMwareTools()
                ks.genHostname()
                ks.genNetworkConfig()

""" if run as a script """
if __name__ == "__main__":
        main()
EOF
python /tmp/pre-ks0

exec 1>&$STDOUTBACK
exec 2>&$STDERRBACK
exec {STDOUTBACK}>&-
exec {STDERRBACK}>&-

%end

%post
%include /tmp/vmwaretools
%end

%addon com_redhat_kdump --disable --reserve-mb='auto'

%end
